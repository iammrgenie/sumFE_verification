attacker [active]

principal owner [
    knows private owner_private_key
    owner_public_key = G^owner_private_key
]

owner -> analyst: [owner_public_key]

principal device [
    knows private device_private_key
    device_public_key = G^device_private_key
]

device -> ss: [device_public_key]

principal ss [
    knows private ss_private_key
    ss_public_key = G^ss_private_key
]

ss -> analyst: [ss_public_key]

principal analyst[
    knows private analyst_private_key
    analyst_public_key = G^analyst_private_key
]

analyst -> ss: [analyst_public_key]

analyst -> owner: [analyst_public_key]

principal device[
    //generates device_nonce
    generates data
    enc_data = PKE_ENC(device_public_key, data)
    //device_proof = SIGN(device_private_key, HASH(CONCAT(device_nonce, enc_data)))
    device_proof = SIGN(device_private_key, HASH(enc_data))
]

//device -> ss: device_nonce, enc_data, device_proof
device -> ss:  enc_data, device_proof


principal ss[
    //device_valid = SIGNVERIF(device_public_key, HASH(CONCAT(device_nonce, enc_data)) ,device_proof)?
    device_valid = SIGNVERIF(device_public_key, HASH( enc_data) ,device_proof)?

]

queries[
    confidentiality? data
    freshness? enc_data
    freshness? device_proof
    authentication? device -> ss: device_proof
]